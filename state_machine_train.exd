import hbp_nrp_excontrol.nrp_states as states
from hbp_nrp_excontrol.logs import clientLogger

from smach import StateMachine
from smach.state import State

from gazebo_msgs.srv import ApplyBodyWrench, GetModelState, SetModelState, SetModelStateRequest, DeleteModel, SpawnEntity, SpawnEntityRequest
from geometry_msgs.msg import Wrench, Vector3, Point
from std_msgs.msg import Float64
import rospy
from rospy import ServiceProxy, wait_for_service, Publisher
import time
import math


FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'

sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])

import hbp_nrp_excontrol.nrp_states as states

ball_name = "ball"
ball_sdf_xml = """
<?xml version='1.0'?>
<sdf version='1.5'>
  <model name='{ball_name}'>
    <pose>0 0 0 0 0 0</pose>
    <link name='{ball_name}'>
      <inertial>
        <mass>0.057</mass>
      </inertial>
      <collision name='collision'>
        <geometry>
          <sphere>
            <radius>.09</radius>
          </sphere>
        </geometry>
      </collision>
      <visual name='visual'>
        <geometry>
          <sphere>
            <radius>.09</radius>
          </sphere>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Green</name>
          </script>
        </material>
      </visual>
    </link>
  </model>
</sdf>
"""

move_proxy = rospy.ServiceProxy('gazebo/set_model_state',
                                      SetModelState,
                                      persistent=True)
model_state_proxy =  rospy.ServiceProxy('gazebo/get_model_state',
                                              GetModelState,
                                              persistent=True)
eye_tilt_pub = rospy.Publisher('/robot/eye_tilt/pos', Float64, queue_size=10)
eye_pan_pub = rospy.Publisher('/robot/left_eye_pan/pos', Float64, queue_size=10)

def move(model_name, dx=0., dy=0., dz=0., smoothness=50):
    smoothness = max(1, smoothness)
    for i in range(smoothness):
        model_state = model_state_proxy(model_name, 'world')
        msg = SetModelStateRequest()
        msg.model_state.model_name = model_name
        msg.model_state.pose = model_state.pose
        msg.model_state.pose.position.x += float(dx) / smoothness
        msg.model_state.pose.position.y += float(dy) / smoothness
        msg.model_state.pose.position.z += float(dz) / smoothness
        msg.model_state.twist = model_state.twist
        msg.model_state.scale = model_state.scale
        msg.model_state.reference_frame = 'world'
        move_proxy(msg)
        time.sleep(0.1)

class InitRobotState(State):
    def __init__(self, outcomes=['success']):
        super(InitRobotState, self).__init__(outcomes=outcomes)

    def execute(self, userdata):
        time.sleep(2)
        clientLogger.info("Moving robot eye...")
        eye_tilt_pub.publish(Float64(-math.pi/4.0))
        eye_pan_pub.publish(Float64(0))
        clientLogger.info("Waiting until robot stops moving...")
        time.sleep(15)
        return 'success'


class MoveLeftState(State):
    def __init__(self, ball_name, outcomes=['success']):
        super(MoveLeftState, self).__init__(outcomes=outcomes)

    def execute(self, userdata):
        move(ball_name, dx=-2)
        return 'success'

class MoveRightState(State):
    def __init__(self, ball_name, outcomes=['success']):
        super(MoveRightState, self).__init__(outcomes=outcomes)

    def execute(self, userdata):
        move(ball_name, dx=2)
        return 'success'

def spawn_ball():
    spawn_proxy = rospy.ServiceProxy('/gazebo/spawn_sdf_entity',
                                           SpawnEntity, persistent=True)
    wrench_proxy = ServiceProxy('/gazebo/apply_body_wrench',
                                      ApplyBodyWrench, persistent=True)

    ball_msg = SpawnEntityRequest()
    ball_msg.entity_name = ball_name
    ball_msg.entity_xml = ball_sdf_xml.format(ball_name=ball_name)
    ball_msg.initial_pose.position.x = 1
    ball_msg.initial_pose.position.y = 0.4
    ball_msg.initial_pose.position.z = 0.1
    ball_msg.reference_frame = "world"
    spawn_proxy(ball_msg)

spawn_ball()

with sm:
    StateMachine.add(
        "initialize_robot", InitRobotState(), transitions = {"success": "move_left"}
    )

    StateMachine.add(
      "move_left",
      MoveLeftState(ball_name),
      transitions = {"success": "move_right"}
    )

    StateMachine.add(
     "move_right",
     MoveRightState(ball_name),
     transitions = {"success": "move_left"}
    )
